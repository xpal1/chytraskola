/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE FUNCTIONS IN ZadaniaActionsGenerated.js PLEASE EDIT ../ZadaniaActions.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */

import * as types from "../../actionTypes";
import ZadaniaApi from "../../../api/ZadaniaApi";

let actionsFunction = {

  //CRUD METHODS

  // Create zadania
  createZadania: function(zadania) {
    return function(dispatch) {
      return ZadaniaApi
        .createZadania(zadania)
        .then(zadania => {
          dispatch(actionsFunction.createZadaniaSuccess(zadania));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  createZadaniaSuccess: function(zadania) {
    return { type: types.CREATE_ZADANIA_SUCCESS, payload: zadania };
  },


  // Delete zadania
  deleteZadania: function(id) {
    return function(dispatch) {
      return ZadaniaApi
        .deleteZadania(id)
        .then(zadania => {
          dispatch(actionsFunction.deleteZadaniaSuccess(zadania));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  deleteZadaniaSuccess: function(zadania) {
    return { type: types.DELETE_ZADANIA_SUCCESS, payload: zadania };
  },


  // Find by _skupina
  findBy_skupina: function(key) {
    return function(dispatch) {
      return ZadaniaApi
        .findBy_skupina(key)
        .then(item => {
          dispatch(actionsFunction.findBy_skupinaSuccess(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  findBy_skupinaSuccess: function(item) {
    return { type: types.FINDBY_SKUPINA_ZADANIA_SUCCESS, payload: item };
  },


  // Find by _triedy
  findBy_triedy: function(key) {
    return function(dispatch) {
      return ZadaniaApi
        .findBy_triedy(key)
        .then(item => {
          dispatch(actionsFunction.findBy_triedySuccess(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  findBy_triedySuccess: function(item) {
    return { type: types.FINDBY_TRIEDY_ZADANIA_SUCCESS, payload: item };
  },


  // Get zadania
  loadZadania: function(id) {
    return function(dispatch) {
      return ZadaniaApi
        .getOneZadania(id)
        .then(zadania => {
          dispatch(actionsFunction.loadZadaniaSuccess(zadania));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadZadaniaSuccess: function(zadania) {
    return { type: types.GET_ZADANIA_SUCCESS, payload: zadania };
  },

  // Load  list
  loadZadaniaList: function() {
    return function(dispatch) {
      return ZadaniaApi
        .getZadaniaList()
        .then(list => {
          dispatch(actionsFunction.loadZadaniaListSuccess(list));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadZadaniaListSuccess: function(list) {
    return { type: types.LIST_ZADANIA_SUCCESS, payload: list };
  },

	
  // Save zadania
  saveZadania: function(zadania) {
    return function(dispatch) {
      return ZadaniaApi
        .saveZadania(zadania)
        .then(zadania => {
          dispatch(actionsFunction.saveZadaniaSuccess(zadania));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  saveZadaniaSuccess: function(zadania) {
    return { type: types.UPDATE_ZADANIA_SUCCESS, payload: zadania };
  },


  /*
  Name: overenie
  Description: API na overenie zadania
  Params: 
    String id - ID zadania
  */
  overenie: function(...params) {
    return function(dispatch) {
      return ZadaniaApi
        .overenie(params)
        .then( result => {
          dispatch(actionsFunction.overenieSuccess(result));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  overenieSuccess: function(result) {
    return { type: types.OVERENIE_ZADANIA_SUCCESS, payload: result };
  },
		
};

export default actionsFunction;
