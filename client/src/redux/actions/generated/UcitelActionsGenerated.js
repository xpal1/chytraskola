/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE FUNCTIONS IN UcitelActionsGenerated.js PLEASE EDIT ../UcitelActions.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */

import * as types from "../../actionTypes";
import UcitelApi from "../../../api/UcitelApi";

let actionsFunction = {

  //CRUD METHODS

  // Create ucitel
  createUcitel: function(ucitel) {
    return function(dispatch) {
      return UcitelApi
        .createUcitel(ucitel)
        .then(ucitel => {
          dispatch(actionsFunction.createUcitelSuccess(ucitel));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  createUcitelSuccess: function(ucitel) {
    return { type: types.CREATE_UCITEL_SUCCESS, payload: ucitel };
  },


  // Delete ucitel
  deleteUcitel: function(id) {
    return function(dispatch) {
      return UcitelApi
        .deleteUcitel(id)
        .then(ucitel => {
          dispatch(actionsFunction.deleteUcitelSuccess(ucitel));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  deleteUcitelSuccess: function(ucitel) {
    return { type: types.DELETE_UCITEL_SUCCESS, payload: ucitel };
  },


  // Find by _triedy
  findBy_triedy: function(key) {
    return function(dispatch) {
      return UcitelApi
        .findBy_triedy(key)
        .then(item => {
          dispatch(actionsFunction.findBy_triedySuccess(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  findBy_triedySuccess: function(item) {
    return { type: types.FINDBY_TRIEDY_UCITEL_SUCCESS, payload: item };
  },


  // Find by _uzivatel
  findBy_uzivatel: function(key) {
    return function(dispatch) {
      return UcitelApi
        .findBy_uzivatel(key)
        .then(item => {
          dispatch(actionsFunction.findBy_uzivatelSuccess(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  findBy_uzivatelSuccess: function(item) {
    return { type: types.FINDBY_UZIVATEL_UCITEL_SUCCESS, payload: item };
  },


  // Get ucitel
  loadUcitel: function(id) {
    return function(dispatch) {
      return UcitelApi
        .getOneUcitel(id)
        .then(ucitel => {
          dispatch(actionsFunction.loadUcitelSuccess(ucitel));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadUcitelSuccess: function(ucitel) {
    return { type: types.GET_UCITEL_SUCCESS, payload: ucitel };
  },

  // Load  list
  loadUcitelList: function() {
    return function(dispatch) {
      return UcitelApi
        .getUcitelList()
        .then(list => {
          dispatch(actionsFunction.loadUcitelListSuccess(list));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadUcitelListSuccess: function(list) {
    return { type: types.LIST_UCITEL_SUCCESS, payload: list };
  },

	
  // Save ucitel
  saveUcitel: function(ucitel) {
    return function(dispatch) {
      return UcitelApi
        .saveUcitel(ucitel)
        .then(ucitel => {
          dispatch(actionsFunction.saveUcitelSuccess(ucitel));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  saveUcitelSuccess: function(ucitel) {
    return { type: types.UPDATE_UCITEL_SUCCESS, payload: ucitel };
  },


};

export default actionsFunction;
