/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE FUNCTIONS IN UzivatelActionsGenerated.js PLEASE EDIT ../UzivatelActions.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */

import * as types from "../../actionTypes";
import UzivatelApi from "../../../api/UzivatelApi";

let actionsFunction = {

  //CRUD METHODS

  // Create uzivatel
  createUzivatel: function(uzivatel) {
    return function(dispatch) {
      return UzivatelApi
        .createUzivatel(uzivatel)
        .then(uzivatel => {
          dispatch(actionsFunction.createUzivatelSuccess(uzivatel));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  createUzivatelSuccess: function(uzivatel) {
    return { type: types.CREATE_UZIVATEL_SUCCESS, payload: uzivatel };
  },


  // Delete uzivatel
  deleteUzivatel: function(id) {
    return function(dispatch) {
      return UzivatelApi
        .deleteUzivatel(id)
        .then(uzivatel => {
          dispatch(actionsFunction.deleteUzivatelSuccess(uzivatel));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  deleteUzivatelSuccess: function(uzivatel) {
    return { type: types.DELETE_UZIVATEL_SUCCESS, payload: uzivatel };
  },


  // Get uzivatel
  loadUzivatel: function(id) {
    return function(dispatch) {
      return UzivatelApi
        .getOneUzivatel(id)
        .then(uzivatel => {
          dispatch(actionsFunction.loadUzivatelSuccess(uzivatel));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadUzivatelSuccess: function(uzivatel) {
    return { type: types.GET_UZIVATEL_SUCCESS, payload: uzivatel };
  },

  // Load  list
  loadUzivatelList: function() {
    return function(dispatch) {
      return UzivatelApi
        .getUzivatelList()
        .then(list => {
          dispatch(actionsFunction.loadUzivatelListSuccess(list));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadUzivatelListSuccess: function(list) {
    return { type: types.LIST_UZIVATEL_SUCCESS, payload: list };
  },

	
  // Save uzivatel
  saveUzivatel: function(uzivatel) {
    return function(dispatch) {
      return UzivatelApi
        .saveUzivatel(uzivatel)
        .then(uzivatel => {
          dispatch(actionsFunction.saveUzivatelSuccess(uzivatel));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  saveUzivatelSuccess: function(uzivatel) {
    return { type: types.UPDATE_UZIVATEL_SUCCESS, payload: uzivatel };
  },


};

export default actionsFunction;
