/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE FUNCTIONS IN Spravy_skupinyActionsGenerated.js PLEASE EDIT ../Spravy_skupinyActions.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */

import * as types from "../../actionTypes";
import Spravy_skupinyApi from "../../../api/Spravy_skupinyApi";

let actionsFunction = {

  //CRUD METHODS

  // Create spravy_skupiny
  createSpravy_skupiny: function(spravy_skupiny) {
    return function(dispatch) {
      return Spravy_skupinyApi
        .createSpravy_skupiny(spravy_skupiny)
        .then(spravy_skupiny => {
          dispatch(actionsFunction.createSpravy_skupinySuccess(spravy_skupiny));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  createSpravy_skupinySuccess: function(spravy_skupiny) {
    return { type: types.CREATE_SPRAVY_SKUPINY_SUCCESS, payload: spravy_skupiny };
  },


  // Delete spravy_skupiny
  deleteSpravy_skupiny: function(id) {
    return function(dispatch) {
      return Spravy_skupinyApi
        .deleteSpravy_skupiny(id)
        .then(spravy_skupiny => {
          dispatch(actionsFunction.deleteSpravy_skupinySuccess(spravy_skupiny));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  deleteSpravy_skupinySuccess: function(spravy_skupiny) {
    return { type: types.DELETE_SPRAVY_SKUPINY_SUCCESS, payload: spravy_skupiny };
  },


  // Find by _skupina
  findBy_skupina: function(key) {
    return function(dispatch) {
      return Spravy_skupinyApi
        .findBy_skupina(key)
        .then(item => {
          dispatch(actionsFunction.findBy_skupinaSuccess(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  findBy_skupinaSuccess: function(item) {
    return { type: types.FINDBY_SKUPINA_SPRAVY_SKUPINY_SUCCESS, payload: item };
  },


  // Get spravy_skupiny
  loadSpravy_skupiny: function(id) {
    return function(dispatch) {
      return Spravy_skupinyApi
        .getOneSpravy_skupiny(id)
        .then(spravy_skupiny => {
          dispatch(actionsFunction.loadSpravy_skupinySuccess(spravy_skupiny));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadSpravy_skupinySuccess: function(spravy_skupiny) {
    return { type: types.GET_SPRAVY_SKUPINY_SUCCESS, payload: spravy_skupiny };
  },

  // Load  list
  loadSpravy_skupinyList: function() {
    return function(dispatch) {
      return Spravy_skupinyApi
        .getSpravy_skupinyList()
        .then(list => {
          dispatch(actionsFunction.loadSpravy_skupinyListSuccess(list));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadSpravy_skupinyListSuccess: function(list) {
    return { type: types.LIST_SPRAVY_SKUPINY_SUCCESS, payload: list };
  },

	
  // Save spravy_skupiny
  saveSpravy_skupiny: function(spravy_skupiny) {
    return function(dispatch) {
      return Spravy_skupinyApi
        .saveSpravy_skupiny(spravy_skupiny)
        .then(spravy_skupiny => {
          dispatch(actionsFunction.saveSpravy_skupinySuccess(spravy_skupiny));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  saveSpravy_skupinySuccess: function(spravy_skupiny) {
    return { type: types.UPDATE_SPRAVY_SKUPINY_SUCCESS, payload: spravy_skupiny };
  },


};

export default actionsFunction;
