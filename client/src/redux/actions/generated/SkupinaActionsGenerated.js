/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE FUNCTIONS IN SkupinaActionsGenerated.js PLEASE EDIT ../SkupinaActions.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */

import * as types from "../../actionTypes";
import SkupinaApi from "../../../api/SkupinaApi";

let actionsFunction = {

  //CRUD METHODS

  // Create skupina
  createSkupina: function(skupina) {
    return function(dispatch) {
      return SkupinaApi
        .createSkupina(skupina)
        .then(skupina => {
          dispatch(actionsFunction.createSkupinaSuccess(skupina));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  createSkupinaSuccess: function(skupina) {
    return { type: types.CREATE_SKUPINA_SUCCESS, payload: skupina };
  },


  // Delete skupina
  deleteSkupina: function(id) {
    return function(dispatch) {
      return SkupinaApi
        .deleteSkupina(id)
        .then(skupina => {
          dispatch(actionsFunction.deleteSkupinaSuccess(skupina));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  deleteSkupinaSuccess: function(skupina) {
    return { type: types.DELETE_SKUPINA_SUCCESS, payload: skupina };
  },


  // Find by _triedy
  findBy_triedy: function(key) {
    return function(dispatch) {
      return SkupinaApi
        .findBy_triedy(key)
        .then(item => {
          dispatch(actionsFunction.findBy_triedySuccess(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  findBy_triedySuccess: function(item) {
    return { type: types.FINDBY_TRIEDY_SKUPINA_SUCCESS, payload: item };
  },


  // Find by _ucitel
  findBy_ucitel: function(key) {
    return function(dispatch) {
      return SkupinaApi
        .findBy_ucitel(key)
        .then(item => {
          dispatch(actionsFunction.findBy_ucitelSuccess(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  findBy_ucitelSuccess: function(item) {
    return { type: types.FINDBY_UCITEL_SKUPINA_SUCCESS, payload: item };
  },


  // Get skupina
  loadSkupina: function(id) {
    return function(dispatch) {
      return SkupinaApi
        .getOneSkupina(id)
        .then(skupina => {
          dispatch(actionsFunction.loadSkupinaSuccess(skupina));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadSkupinaSuccess: function(skupina) {
    return { type: types.GET_SKUPINA_SUCCESS, payload: skupina };
  },

  // Load  list
  loadSkupinaList: function() {
    return function(dispatch) {
      return SkupinaApi
        .getSkupinaList()
        .then(list => {
          dispatch(actionsFunction.loadSkupinaListSuccess(list));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadSkupinaListSuccess: function(list) {
    return { type: types.LIST_SKUPINA_SUCCESS, payload: list };
  },

	
  // Save skupina
  saveSkupina: function(skupina) {
    return function(dispatch) {
      return SkupinaApi
        .saveSkupina(skupina)
        .then(skupina => {
          dispatch(actionsFunction.saveSkupinaSuccess(skupina));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  saveSkupinaSuccess: function(skupina) {
    return { type: types.UPDATE_SKUPINA_SUCCESS, payload: skupina };
  },


};

export default actionsFunction;
